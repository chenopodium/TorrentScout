/*
 * Copyright (C) 2011 Life Technologies Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.iontorrent.chipview;

import com.iontorrent.expmodel.ExperimentContext;
import com.iontorrent.guiutils.netbeans.OpenWindowAction;
import com.iontorrent.ionogram.TorrentScoutIonogramTopComponent.OpenAnotherAction;
import com.iontorrent.utils.LookupUtils;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.Action;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.iontorrent.chipview//WholeChipView//EN",
autostore = false)
@TopComponent.Description(preferredID = "WholeChipViewTopComponent",
iconBase = "com/iontorrent/maskview/chip.png",
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "left_editor_mode", openAtStartup = false)
@ActionID(category = "Window", id = "com.iontorrent.chipview.WholeChipViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_WholeChipViewAction",
preferredID = "WholeChipViewTopComponent")
public final class WholeChipViewTopComponent extends TopComponent {
    
    private transient final Lookup.Result<ExperimentContext> expContextResults =
            LookupUtils.getSubscriber(ExperimentContext.class, new SubscriberListener());
    private ChipPanel chippanel;
    
    public WholeChipViewTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(WholeChipViewTopComponent.class, "CTL_WholeChipViewTopComponent"));
        setToolTipText(NbBundle.getMessage(WholeChipViewTopComponent.class, "HINT_WholeChipViewTopComponent"));
        getLatestExperimentContext();
    }

    private class SubscriberListener implements LookupListener {

        @Override
        public void resultChanged(LookupEvent ev) {
            getLatestExperimentContext();
        }
    }

    @Override
    public Action[] getActions() {
        Action[] ac = OpenWindowAction.getActions(this);
        Action[] actions = new Action[ac.length];
        System.arraycopy(ac, 0, actions, 0, ac.length);
        
        return actions;
    }
    private void getLatestExperimentContext() {
        //   p("Getting latest exp context");
        
        final Collection<? extends ExperimentContext> items = expContextResults.allInstances();
        if (!items.isEmpty()) {
            ExperimentContext data = null;
            Iterator<ExperimentContext> it = (Iterator<ExperimentContext>) items.iterator();
            while (it.hasNext()) {
                data = it.next();
            }
            if (data != null) {
                update(data);
            }
        }
    }

    private void update(ExperimentContext exp) {
        //   p("updating exp context "+result.getResDir());
        if (exp == null) {
            return;
        }
        //this.exp = exp;
        if (chippanel == null) {           
            chippanel = new ChipPanel(exp);
            this.add("Center", chippanel); 
        }
      //  this.panMain.add("South", new JLabel("south")); 
        chippanel.update(true);
        repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        getLatestExperimentContext();
    }
    
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }
    
    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
