/*
 * Copyright (C) 2011 Life Technologies Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * CurveView.java
 *
 * Created on 03.11.2011, 12:29:31
 */
package com.iontorrent.torrentscout.explorer.process;

import com.iontorrent.torrentscout.explorer.ExplorerContext;
import com.iontorrent.torrentscout.explorer.Export;
import com.iontorrent.torrentscout.explorer.fit.AbstractHistoFunction;
import com.iontorrent.torrentscout.explorer.fit.FitFunctionsFactory;
import com.iontorrent.torrentscout.explorer.fit.FitFunctionsPanel;
import com.iontorrent.torrentscout.explorer.fit.FunctionListener;
import com.iontorrent.torrentscout.explorer.options.TorrentExplorerPanel;
import com.iontorrent.utils.io.FileTools;
import java.util.prefs.Preferences;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.openide.util.NbPreferences;

/**
 *
 * @author Chantal Roth
 */
public class CurveView extends javax.swing.JPanel implements FunctionListener {

    ExplorerContext maincont;
    CurvePanel cpanel;
    FitFunctionsPanel fitpanel;
    JFrame dialogframe;

    /** Creates new form CurveView */
    public CurveView(ExplorerContext maincont, String title) {
        initComponents();
        this.maincont = maincont;
        cpanel = new CurvePanel(maincont, title);
        fitpanel = new FitFunctionsPanel(maincont, this);
        for (PlotFunction f : FitFunctionsFactory.getPlotFunctions(maincont)) {

            this.boxFunc.addItem(f);

        }
        panMain.add("Center", cpanel);
        //   panMain.add("East", new WidgetPanel(maincont));

    }
private void doHintAction() {
        String msg = "<html>You can do the following things here:<ul>";
        msg += "<li>drag the <b>green</b> vertical lines around with the left mouse button.<br>"
                + "This will select the area used in the Fit Component to compute the histograms,<br>"
                + "and it will also be used in some cases for functions (such as the peak function)</li>";
        msg += "<li>drag around the <b>red</b> vertical lines. This can be used to select a smaller view (<b>scissors</b><br>"
                + "and it is also used by some functions (such as the paramameterized adjustment to define the start)</li>";
        msg += "<li><b>overlay a function</b> by selecting it in the drop down box.<br>"
                + "to change the shape of the function, use the <b>tools</b> icon right next to the drop down box."
                + "<br>This function can then be used to classify wells in the Fit component (histogram) (see for more help there)</li>";
        msg += "<li>You can also export the data to file with the save icon</li>";
        msg += "</ul></html>";
        JOptionPane.showMessageDialog(this, msg);
    }
    @Override
    public void repaint() {
        super.repaint();
        if (cpanel != null) {
            cpanel.repaint();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panMain = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnRefresh = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnimage = new javax.swing.JButton();
        cut = new javax.swing.JButton();
        boxFunc = new javax.swing.JComboBox();
        config = new javax.swing.JButton();
        hint = new javax.swing.JButton();

        setOpaque(false);
        setLayout(new java.awt.BorderLayout());

        panMain.setOpaque(false);
        panMain.setLayout(new java.awt.BorderLayout());
        add(panMain, java.awt.BorderLayout.CENTER);

        jToolBar1.setRollover(true);
        jToolBar1.setMaximumSize(new java.awt.Dimension(100, 20));
        jToolBar1.setMinimumSize(new java.awt.Dimension(80, 20));
        jToolBar1.setPreferredSize(new java.awt.Dimension(100, 20));

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/view-refresh-3.png"))); // NOI18N
        btnRefresh.setText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.btnRefresh.text")); // NOI18N
        btnRefresh.setToolTipText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.btnRefresh.toolTipText")); // NOI18N
        btnRefresh.setFocusable(false);
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRefresh);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/maskview/document-export.png"))); // NOI18N
        btnSave.setText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.btnSave.text")); // NOI18N
        btnSave.setToolTipText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.btnSave.toolTipText")); // NOI18N
        btnSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        jToolBar1.add(btnSave);

        btnimage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/picture-save.png"))); // NOI18N
        btnimage.setText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.btnimage.text")); // NOI18N
        btnimage.setToolTipText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.btnimage.toolTipText")); // NOI18N
        btnimage.setFocusable(false);
        btnimage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnimage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnimage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnimageActionPerformed(evt);
            }
        });
        jToolBar1.add(btnimage);

        cut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/fit/edit-cut-5.png"))); // NOI18N
        cut.setText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.cut.text")); // NOI18N
        cut.setToolTipText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.cut.toolTipText")); // NOI18N
        cut.setFocusable(false);
        cut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        jToolBar1.add(cut);

        boxFunc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "no function" }));
        boxFunc.setMaximumSize(new java.awt.Dimension(120, 18));
        boxFunc.setMinimumSize(new java.awt.Dimension(50, 18));
        boxFunc.setPreferredSize(new java.awt.Dimension(100, 18));
        boxFunc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxFuncActionPerformed(evt);
            }
        });
        jToolBar1.add(boxFunc);

        config.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/configure-3.png"))); // NOI18N
        config.setText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.config.text")); // NOI18N
        config.setFocusable(false);
        config.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        config.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        config.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configActionPerformed(evt);
            }
        });
        jToolBar1.add(config);

        hint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/help-hint.png"))); // NOI18N
        hint.setText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.hint.text")); // NOI18N
        hint.setToolTipText(org.openide.util.NbBundle.getMessage(CurveView.class, "CurveView.hint.toolTipText")); // NOI18N
        hint.setFocusable(false);
        hint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hint.setMargin(new java.awt.Insets(0, 0, 0, 0));
        hint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintActionPerformed(evt);
            }
        });
        jToolBar1.add(hint);

        add(jToolBar1, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed

        rasterViewCreate(true);     }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
  
        String file = Export.getFile("Save chart info into file", "*.csv", true);
        if (file == null) {
            return;
        }
        boolean ok = export(file);

		}//GEN-LAST:event_btnSaveActionPerformed

    private void btnimageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnimageActionPerformed
        this.cpanel.exportImage();
    }//GEN-LAST:event_btnimageActionPerformed

    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        cpanel.setCrop(true);
        cpanel.invalidate();
        cpanel.repaint();
    }//GEN-LAST:event_cutActionPerformed

    private void configActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configActionPerformed

        // NON MODEL
        //  if (dialogframe == null || !dialogframe.isShowing()) {
        //       dialogframe = new JFrame();

        //  WindowManager.getDefault().getMainWindow();
        final JDialog newdialog = new JDialog(new JFrame(), "Select the parameters for the plot functions", false);
        newdialog.getContentPane().add(fitpanel);
        if ( boxFunc.getSelectedItem() != null &&  boxFunc.getSelectedItem() instanceof AbstractHistoFunction) {
            AbstractHistoFunction curfunction =  (AbstractHistoFunction) boxFunc.getSelectedItem();
            if (curfunction != null) fitpanel.select(curfunction);
        }
        newdialog.pack();
        newdialog.setAlwaysOnTop(true);
        newdialog.setVisible(true);

//            dialogframe.addWindowListener(new WindowListener() {
//
//                @Override
//                public void windowOpened(WindowEvent e) {
//                }
//
//                @Override
//                public void windowClosing(WindowEvent e) {
//                }
//
//                @Override
//                public void windowClosed(WindowEvent e) {
//                    fitpanel.parseParameters();
//                    newdialog.remove(fitpanel);
//                }
//
//                @Override
//                public void windowIconified(WindowEvent e) {
//                    // throw new UnsupportedOperationException("Not supported yet.");
//                }
//
//                @Override
//                public void windowDeiconified(WindowEvent e) {
//                    //  throw new UnsupportedOperationException("Not supported yet.");
//                }
//
//                @Override
//                public void windowActivated(WindowEvent e) {
//                    //  throw new UnsupportedOperationException("Not supported yet.");
//                }
//
//                @Override
//                public void windowDeactivated(WindowEvent e) {
//                    //  throw new UnsupportedOperationException("Not supported yet.");
//                }
//            });
        //           dialogframe.setVisible(true);
        //  dialogframe.sh
        //}

        //  JOptionPane.showMessageDialog(this, fitpanel, "Select the parameters for the plot functions", JOptionPane.QUESTION_MESSAGE);
        //   fitpanel.parseParameters();
        // newdialog.add
    }//GEN-LAST:event_configActionPerformed

    private void boxFuncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxFuncActionPerformed
        if (boxFunc.getSelectedItem() instanceof PlotFunction){
            PlotFunction curfunction = (PlotFunction) boxFunc.getSelectedItem();
            cpanel.setPlotfunction(curfunction);
            
        }
        else cpanel.setPlotfunction(null);
        rasterViewCreate(false);
    }//GEN-LAST:event_boxFuncActionPerformed

    private void hintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintActionPerformed

        doHintAction();     }//GEN-LAST:event_hintActionPerformed
    private int getInt(JTextField t) {
        if (t == null || t.getText() == null) {
            return 0;
        }
        int f = 0;
        try {
            f = Integer.parseInt(t.getText());
        } catch (Exception e) {
        }
        return f;
    }

    private void rasterViewCreate(boolean b) {
        cpanel.setCrop(false);
        cpanel.invalidate();
        cpanel.repaint();
        // cpanel.paintImmediately(0,0,1000,800);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox boxFunc;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnimage;
    private javax.swing.JButton config;
    private javax.swing.JButton cut;
    private javax.swing.JButton hint;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel panMain;
    // End of variables declaration//GEN-END:variables

    public boolean export(String file) {
        return cpanel.exportData(file);
    }

    @Override
    public void functionChanged(PlotFunction fun) {
        //  System.out.println("CurveView: Function changed: "+fun.toString());
        // rasterViewCreate(false);
        cpanel.invalidate();
        cpanel.repaint();
        this.repaint();
        cpanel.paintImmediately(0, 0, 1000, 800);
    }
}
