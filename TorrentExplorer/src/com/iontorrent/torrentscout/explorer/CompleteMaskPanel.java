/*
 * Copyright (C) 2011 Life Technologies Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * CompleteMaskPanel.java
 *
 * Created on 01.11.2011, 08:20:48
 */
package com.iontorrent.torrentscout.explorer;

import com.iontorrent.expmodel.ExperimentContext;
import com.iontorrent.expmodel.Settings;
import com.iontorrent.guiutils.GuiUtils;
import com.iontorrent.rawdataaccess.wells.BitMask;
import com.iontorrent.torrentscout.explorer.options.TorrentExplorerPanel;
import com.iontorrent.utils.io.FileTools;
import com.iontorrent.utils.io.FileUtils;
import com.iontorrent.wellmodel.RasterData;
import com.iontorrent.wellmodel.WellCoordinate;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import org.openide.util.NbPreferences;

/**
 *
 * @author Chantal Roth
 */
public class CompleteMaskPanel extends javax.swing.JPanel {

    ExperimentContext expContext;
    MaskEditDensityPanel densityPanel;
    BitMask mask;
    ExplorerContext maincont;
    //  Color[] gradientColors = new Color[]{Color.black, Color.blue, Color.green, Color.yellow, Color.orange, Color.red, Color.white};

    /** Creates new form CompleteMaskPanel */
    public CompleteMaskPanel(ExplorerContext maincont, BitMask mask) {
        initComponents();
        this.maincont = maincont;
        this.expContext = maincont.getExp();
        update(mask);
    }
    private void update(BitMask mask) {
         // add widgets to density panel
        if (densityPanel != null) remove(densityPanel);
        densityPanel = new MaskEditDensityPanel(expContext, mask);

        densityPanel.setContext(mask, 1);
        densityPanel.showNavigationImage(false);
        txtName.setText(mask.getName());
        this.mask = mask;
        add("Center", densityPanel);
    }
    public void setColors(Color[] gradientColors) {
        densityPanel.setColors(gradientColors);
    }

    private void doHintAction() {
        String msg = "<html>You can do the following things here:<ul>";
        msg += "<li>Flag more pinned wells based on your own maximum and minumum count</li>";
        msg += "<li>Invert a mask</li>";
        msg += "<li>Load and save a mask</li>";
        msg += "<li>Select wells by drawing a rectangle, and <b>viewing alignments, ionograms etc</b> for those wells<br>"
                + "(Use the <b>Table component</b> to view information about the selected wells - menu windows, table component)</li>";
        msg += "<li>rename a mask</li>";
        msg += "</ul></html>";
        JOptionPane.showMessageDialog(this, msg);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panControls = new javax.swing.JPanel();
        spinBucket = new javax.swing.JSpinner();
        lblGridSize = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        btnInvert = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnOpen = new javax.swing.JButton();
        btnImage = new javax.swing.JButton();
        pin = new javax.swing.JButton();
        hint = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        panMask = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        panControls.setOpaque(false);
        panControls.setLayout(new java.awt.GridBagLayout());

        spinBucket.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 1));
        spinBucket.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.spinBucket.toolTipText")); // NOI18N
        spinBucket.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinBucketStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        panControls.add(spinBucket, gridBagConstraints);

        lblGridSize.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.lblGridSize.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        panControls.add(lblGridSize, gridBagConstraints);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/maskview/document-export.png"))); // NOI18N
        btnSave.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnSave.text")); // NOI18N
        btnSave.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnSave.toolTipText")); // NOI18N
        btnSave.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 18;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        panControls.add(btnSave, gridBagConstraints);

        txtName.setColumns(10);
        txtName.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.txtName.text")); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        txtName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNameFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        panControls.add(txtName, gridBagConstraints);

        btnInvert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/invert.png"))); // NOI18N
        btnInvert.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnInvert.text")); // NOI18N
        btnInvert.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnInvert.toolTipText")); // NOI18N
        btnInvert.setMargin(new java.awt.Insets(1, 1, 1, 1));
        btnInvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvertActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 0;
        panControls.add(btnInvert, gridBagConstraints);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/docnew.png"))); // NOI18N
        btnNew.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnNew.text")); // NOI18N
        btnNew.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnNew.toolTipText")); // NOI18N
        btnNew.setMargin(new java.awt.Insets(1, 1, 1, 1));
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        panControls.add(btnNew, gridBagConstraints);

        btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/maskview/document-open-2.png"))); // NOI18N
        btnOpen.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnOpen.text")); // NOI18N
        btnOpen.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnOpen.toolTipText")); // NOI18N
        btnOpen.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 19;
        gridBagConstraints.gridy = 0;
        panControls.add(btnOpen, gridBagConstraints);

        btnImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/mask.png"))); // NOI18N
        btnImage.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnImage.text")); // NOI18N
        btnImage.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.btnImage.toolTipText")); // NOI18N
        btnImage.setMargin(new java.awt.Insets(1, 1, 1, 1));
        btnImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 17;
        gridBagConstraints.gridy = 0;
        panControls.add(btnImage, gridBagConstraints);

        pin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/flag-red.png"))); // NOI18N
        pin.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.pin.text")); // NOI18N
        pin.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.pin.toolTipText")); // NOI18N
        pin.setMargin(new java.awt.Insets(1, 1, 1, 1));
        pin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pinActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        panControls.add(pin, gridBagConstraints);

        hint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/help-hint.png"))); // NOI18N
        hint.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.hint.text")); // NOI18N
        hint.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.hint.toolTipText")); // NOI18N
        hint.setFocusable(false);
        hint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hint.setMargin(new java.awt.Insets(0, 0, 0, 0));
        hint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 20;
        gridBagConstraints.gridy = 0;
        panControls.add(hint, gridBagConstraints);

        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/edit-delete-6.png"))); // NOI18N
        delete.setText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.delete.text")); // NOI18N
        delete.setToolTipText(org.openide.util.NbBundle.getMessage(CompleteMaskPanel.class, "CompleteMaskPanel.delete.toolTipText")); // NOI18N
        delete.setMargin(new java.awt.Insets(0, 0, 0, 0));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        panControls.add(delete, new java.awt.GridBagConstraints());

        add(panControls, java.awt.BorderLayout.NORTH);

        javax.swing.GroupLayout panMaskLayout = new javax.swing.GroupLayout(panMask);
        panMask.setLayout(panMaskLayout);
        panMaskLayout.setHorizontalGroup(
            panMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        panMaskLayout.setVerticalGroup(
            panMaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        add(panMask, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void spinBucketStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinBucketStateChanged
        update();
    }//GEN-LAST:event_spinBucketStateChanged

    @Override
    public void setName(String name) {
        super.setName(name);
//        TitledBorder tb = (TitledBorder) this.getBorder();
//        tb.setTitle(name);
    }

    public void refresh() {
        densityPanel.redrawImage();
        update();
    }

    public void update() {
        p("Updating panel");
        int buck = (Integer) spinBucket.getValue();

        densityPanel.setContext(mask, buck);
        densityPanel.showNavigationImage(false);
        txtName.setText(mask.getName());
        //   densityPanel.createDefaultSelection(10, 10, 15, 15);
        densityPanel.repaint();

    }

    private void p(String msg) {
        // System.out.println("CompleteMaskPanel: " + msg);
        Logger.getLogger(CompleteMaskPanel.class.getName()).log(Level.INFO, msg);
    }
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        
        String file = Export.getFile("Save mask into file", "*.bin", true);
        if (file == null) {
            return;
        }
        mask.write(file);
        GuiUtils.showNonModalMsg("Mask written to file "+file, "Mask");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        mask.setName(txtName.getText());
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNameFocusLost
        mask.setName(txtName.getText());
    }//GEN-LAST:event_txtNameFocusLost

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        String file = FileTools.getFile("Load mask from file", "*.bit", "");
        if (file == null || !FileUtils.exists(file)) {
            return;
        }
        BitMask m = BitMask.read(file);
        if (m == null) {
            JOptionPane.showMessageDialog(this, "Could not read the file " + file);
            return;

        }
        WellCoordinate rel = mask.getRelCoord();
        WellCoordinate abs = new WellCoordinate(rel.getCol() + maincont.getExp().getColOffset(), rel.getRow() + maincont.getExp().getRowOffset());
        if (!rel.equals(maincont.getRelativeDataAreaCoord())) {
            int ans = JOptionPane.showConfirmDialog(this, "<html>The mask has a different coordinate " + abs + 
                    "<br>Do you want to reset all other masks and change the location???"+
                    "<br>(The loaded mask will be appended to the end)");
            if (ans != JOptionPane.OK_OPTION) {
                return;
            }
            maincont.setRelDataAreaCoord(rel);
            maincont.getExp().getWellContext().setAbsCoordinate(maincont.getAbsDataAreaCoord());
            maincont.dataAreaCoordChanged(abs);
            maincont.getMasks().add(m);
            maincont.masksChanged();
        }
        else {
            mask.copyFrom(m);
            JOptionPane.showMessageDialog(this, "The loaded mask has the same well coordinates - overwrote current mask");
        }
        
        update();
        //GuiUtils.showNonModalMsg("Mask loaded");
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        int size = mask.getNrCols();
        for (int c = 0; c < size; c++) {
            for (int r = 0; r < size; r++) {
                mask.set(c, r, false);
            }
        }
        update();

    }//GEN-LAST:event_btnNewActionPerformed

    private void btnImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageActionPerformed
        this.densityPanel.export();

    }//GEN-LAST:event_btnImageActionPerformed

    private void btnInvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvertActionPerformed
        mask.invert(mask);
        update();
        GuiUtils.showNonModalMsg("Mask inverted", "Mask");
    }//GEN-LAST:event_btnInvertActionPerformed

    private void pinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pinActionPerformed
        findPinned();
    }//GEN-LAST:event_pinActionPerformed

    private void hintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintActionPerformed
        doHintAction();
    }//GEN-LAST:event_hintActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        
        int ans = JOptionPane.showConfirmDialog(this, "Do you really want to delete this mask "+mask.getName()+"? ", "Remove mask from view?", JOptionPane.OK_CANCEL_OPTION);
        if (ans == JOptionPane.CANCEL_OPTION) {
            return;
        }
        maincont.maskRemoved(mask);
    }//GEN-LAST:event_deleteActionPerformed

    private int getInt(String s) {
        int i = 0;
        try {
            return Integer.parseInt(s);
        } catch (Exception e) {
        }
        return i;
    }

    private void findPinned() {
        if (this.maincont.getData() == null) {
            maincont = ExplorerContext.getCurContext(expContext);

            if (this.maincont.getData() == null) {
                JOptionPane.showMessageDialog(this, "No data loaded yet to find pinned pixels - could be a bug (seen this before...)");
                return;
            }
        }
        RasterData data = maincont.getData();
        int size = mask.getNrCols();
        int count = 0;
        // get min max pinned
        String s = JOptionPane.showInputDialog(this, "Maximum acceptable value in current data (note: may be nn and OFFSET subtracted...)", Settings.PIN_MAX);
        if (s == null) {
            return;
        }
        int max = getInt(s);
        s = JOptionPane.showInputDialog(this, "Minimum acceptable value in current data (note: may be nn and OFFSET subtracted...)", -100);
        if (s == null) {
            return;
        }
        int min = getInt(s);
        if (min >= max) {
            return;
        }
        for (int c = 0; c < size; c++) {
            for (int r = 0; r < size; r++) {
                if (!mask.get(c, r)) {
                    if (data.isPinned(c, r, min, max)) {
                        count++;
                        mask.set(c, r, true);
                    }
                }
            }
        }
        this.refresh();
        JOptionPane.showMessageDialog(this, "Flagged " + count + " additional pixels");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImage;
    private javax.swing.JButton btnInvert;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton delete;
    private javax.swing.JButton hint;
    private javax.swing.JLabel lblGridSize;
    private javax.swing.JPanel panControls;
    private javax.swing.JPanel panMask;
    private javax.swing.JButton pin;
    private javax.swing.JSpinner spinBucket;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    void setMask(BitMask mask) {
        this.mask = mask;
        setName(mask.getName());
    }
}
