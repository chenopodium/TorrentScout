/*
 * Copyright (C) 2011 Life Technologies Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * MaskCommandPanel.java
 *
 * Created on 17.11.2011, 17:04:54
 */
package com.iontorrent.torrentscout.explorer.edit;

import com.iontorrent.guiutils.GuiUtils;
import com.iontorrent.rawdataaccess.wells.BitMask;
import com.iontorrent.torrentscout.explorer.ExplorerContext;
import com.iontorrent.utils.StringTools;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Chantal Roth
 */
public class MaskCommandPanel extends javax.swing.JPanel {

    ExplorerContext cont;
    MaskCommandParser parser;
    /** Creates new form MaskCommandPanel */
    ArrayList<BitMask> tmpmasks;
    ArrayList<BitMask> masks;
    BitMask template;
    ActionListener list;

    public MaskCommandPanel(ExplorerContext cont, ActionListener list) {
        initComponents();
        this.cont = cont;
        this.list = list;
        parser = new MaskCommandParser(cont);
    }

    public BitMask getResult() {
        return parser.getResult();
    }

    public void doParseAction() {
        
        String cmd = txtCmd.getText();
        String msg = parser.doParseAction(cmd);
        if (msg != null && msg.length() > 0) {
            JOptionPane.showMessageDialog(this, msg);
        }
        if (parser.getResult() == null) {
            if (parser.getMessage() != null) {
                txtCmd.setText(parser.getMessage());
            }
            else GuiUtils.showNonModalMsg("Could not parse "+cmd, "Parsing error");                        
        }
        else GuiUtils.showNonModalMsg(cmd+" parsed -> "+parser.getResult().getName(), "Parsing OK");                        
        cont.maskChanged(parser.getResult());
        // cont.masksChanged();
        list.actionPerformed(null);
    }

    private void doHintAction() {
        String msg = "<html>You can do the following things here:<ul>";
        msg += "<li>General commands: new, clear</li>";
        msg += "<li>Mask names: (say the mask is 1. ignore)<br>"
                + "- you can use the number 1<br>"
                + "- the full mask name 1. ignore<br>"
                + "- just the part aftr the space ignoree<br>"
                + "- just the beginning of the name 1. ig"
                + "<br>(it will pick the first it finds)</li>";
        msg += "<li>And operation: and, & </li>";
        msg += "<li>Or operation: or, |</li>";
        msg += "<li>Plus operation: add, + </li>";
        msg += "<li>Subtract operation: minus, subtract, - </li>";
        msg += "<li>Not operation: not, !, ~ </li>";
        msg += "<li>Copy operation: copy, duplicate </li>";
        //   msg += "<li>(shift operations are almost implemented) </li>";
        msg += "<li>Shift diagonal: shift, diag, shiftdiag; </li>";
        msg += "<li>Shift left: shiftleft, left, &lt; </li>";
        msg += "<li>Shift right: shiftright, right, &gt; </li>";
        msg += "<li>Shift up: shiftup, up, ^ </li>";
        msg += "<li>Shift down: shiftdown, down, v </li>";
        msg += "<li>Example: ignore = (empty or pinned)</li>";
        msg += "<li>Example: newbg = (empty minus somemask)</li>";
        msg += "<li>Example: c = (a | b) & (c | d)</li>";
        msg += "<li>Example: c = !a and (b > 4) (shifting be to the right by for, combining with not a)</li>";
        msg += "<li>Example:0 = 0 shift 4 4 (shifting mask by 4 in x and 4 in y direction)</li>";
        msg += "</ul></html>";
        JOptionPane.showMessageDialog(this, msg);
    }

    private void p(String msg) {
        System.out.println("MaskParser: " + msg);
        this.txtCmd.append("\n" + msg);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        bclear = new javax.swing.JButton();
        bparse = new javax.swing.JButton();
        hint = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCmd = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        bclear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/document-new-3.png"))); // NOI18N
        bclear.setText(org.openide.util.NbBundle.getMessage(MaskCommandPanel.class, "MaskCommandPanel.bclear.text")); // NOI18N
        bclear.setFocusable(false);
        bclear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bclear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bclearActionPerformed(evt);
            }
        });
        jToolBar1.add(bclear);

        bparse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/system-run-3.png"))); // NOI18N
        bparse.setText(org.openide.util.NbBundle.getMessage(MaskCommandPanel.class, "MaskCommandPanel.bparse.text")); // NOI18N
        bparse.setFocusable(false);
        bparse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bparse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bparse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bparseActionPerformed(evt);
            }
        });
        jToolBar1.add(bparse);

        hint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/torrentscout/explorer/help-hint.png"))); // NOI18N
        hint.setText(org.openide.util.NbBundle.getMessage(MaskCommandPanel.class, "MaskCommandPanel.hint.text")); // NOI18N
        hint.setToolTipText(org.openide.util.NbBundle.getMessage(MaskCommandPanel.class, "MaskCommandPanel.hint.toolTipText")); // NOI18N
        hint.setFocusable(false);
        hint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hint.setMargin(new java.awt.Insets(0, 0, 0, 0));
        hint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        hint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintActionPerformed(evt);
            }
        });
        jToolBar1.add(hint);

        add(jToolBar1, java.awt.BorderLayout.NORTH);

        txtCmd.setColumns(70);
        txtCmd.setRows(4);
        txtCmd.setText(org.openide.util.NbBundle.getMessage(MaskCommandPanel.class, "MaskCommandPanel.txtCmd.text")); // NOI18N
        txtCmd.setToolTipText(org.openide.util.NbBundle.getMessage(MaskCommandPanel.class, "MaskCommandPanel.txtCmd.toolTipText")); // NOI18N
        jScrollPane1.setViewportView(txtCmd);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void hintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hintActionPerformed

        doHintAction();     }//GEN-LAST:event_hintActionPerformed

    private void bparseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bparseActionPerformed
        this.doParseAction();
    }//GEN-LAST:event_bparseActionPerformed

    private void bclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bclearActionPerformed
        this.txtCmd.setText("");
    }//GEN-LAST:event_bclearActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bclear;
    private javax.swing.JButton bparse;
    private javax.swing.JButton hint;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea txtCmd;
    // End of variables declaration//GEN-END:variables
}
