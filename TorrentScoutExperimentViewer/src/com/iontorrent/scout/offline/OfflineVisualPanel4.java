/*
*	Copyright (C) 2011 Life Technologies Inc.
*
*   This program is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 2 of the License, or
*   (at your option) any later version.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iontorrent.scout.offline;

import com.iontorrent.expmodel.ExperimentContext;
import com.iontorrent.expmodel.GlobalContext;
import com.iontorrent.main.startup.TorrentScoutStartupTopComponent;
import com.iontorrent.rawdataaccess.pgmacquisition.RawDataFacade;
import com.iontorrent.rawdataaccess.pgmacquisition.RawType;
import com.iontorrent.threads.Task;
import com.iontorrent.threads.TaskListener;
import java.awt.Color;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import org.openide.windows.WindowManager;

public final class OfflineVisualPanel4 extends JPanel implements TaskListener, WizPanel {

    private ExperimentContext exp;

    /** Creates new form OfflineVisualPanel4 */
    public OfflineVisualPanel4(ExperimentContext exp) {
        initComponents();
        this.exp = exp;
    }

    @Override
    public String getName() {
        return "Step #4 (.Dat files)";
    }

     @Override
    public boolean doBeforeEntering() {
         
         checkCached();  
         return true;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCacheDatFiles = new javax.swing.JButton();
        boxCached = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setOpaque(false);

        org.openide.awt.Mnemonics.setLocalizedText(btnCacheDatFiles, org.openide.util.NbBundle.getMessage(OfflineVisualPanel4.class, "OfflineVisualPanel4.btnCacheDatFiles.text")); // NOI18N
        btnCacheDatFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCacheDatFilesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(boxCached, org.openide.util.NbBundle.getMessage(OfflineVisualPanel4.class, "OfflineVisualPanel4.boxCached.text")); // NOI18N
        boxCached.setOpaque(false);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OfflineVisualPanel4.class, "OfflineVisualPanel4.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxCached)
                    .addComponent(btnCacheDatFiles)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(179, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnCacheDatFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(boxCached)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCacheDatFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCacheDatFilesActionPerformed
        
        TorrentScoutStartupTopComponent tc = (TorrentScoutStartupTopComponent) WindowManager.getDefault().findTopComponent("TorrentScoutStartupTopComponent");
//  System.out.println("Wizpage 4: Got exp: "+getExp());
        if (tc == null) {
    //  System.out.println("Wizpage 4:Could not find startup component");
        }
        else {
            GlobalContext.getContext().setExperimentContext(exp, false);
            tc.setExperimentContext(getExp());
            tc.checkAndMaybeConvertFiles(this);
        }
    }//GEN-LAST:event_btnCacheDatFilesActionPerformed

    @Override
    public void taskDone(Task t) {
       // p("Task " + t + " is done");
        setCursor(null);
        this.checkCached();


    }

    public void checkCached() {
        // check raw directory

        RawType rtype = RawType.ACQ;
        // count nr of flows so far
        RawDataFacade io = RawDataFacade.getFacade(getExp().getRawDir(), getExp().getCacheDir(), rtype);
        
        if (io.isRegionFormat(0)) {
            boxCached.setText("Raster format, no need for caching");
            this.btnCacheDatFiles.setEnabled(false);
            setOk(boxCached, true);
            return;
        }
        else if (io.isSmall(0)) {
            boxCached.setText("Small files, no need for caching");
            this.btnCacheDatFiles.setEnabled(false);
            setOk(boxCached, true);
            return;
        }
        int nrcached = io.getNrFlowsInCache();

        if (nrcached <= 0) {
            this.boxCached.setText("found no cached .dat files!");
        } else if (nrcached == 1) {
            this.boxCached.setText("found just " + nrcached + " cached .dat file");
        } else {
            this.boxCached.setText("found " + nrcached + " cached .dat files");
        }
        setOk(boxCached, nrcached > 0);

        if (nrcached == 0) {
            btnCacheDatFiles.setSelected(true);
        }
        //else btnView.setSelected(true);
    }

    private void setOk(JCheckBox box, boolean ok) {
        box.setSelected(ok);
       // box.setEnabled(false);
        if (ok) {
            box.setForeground(Color.green.darker());

        } else {
            box.setForeground(Color.red.darker());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox boxCached;
    private javax.swing.JButton btnCacheDatFiles;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the exp
     */
    public ExperimentContext getExp() {
        return exp;
    }

    /**
     * @param exp the exp to set
     */
    @Override
    public void setExp(ExperimentContext exp) {
        this.exp = exp;
    }
}
