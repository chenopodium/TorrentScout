/*
 *	Copyright (C) 2011 Life Technologies Inc.
 *
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iontorrent.scout.offline;

import com.iontorrent.expmodel.ExperimentContext;
import com.iontorrent.scout.experimentviewer.IndexPanel;
import com.iontorrent.sequenceloading.SequenceLoader;
import com.iontorrent.threads.Task;
import com.iontorrent.threads.TaskListener;
import java.awt.Frame;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.netbeans.api.progress.ProgressHandle;
import org.openide.windows.WindowManager;

public final class OfflineVisualPanel3 extends JPanel implements TaskListener, WizPanel {

    private ExperimentContext exp;
    SequenceLoader loader;
    ProgressHandle progress;
    Frame frame;
    IndexPanel indexpanel;

    /** Creates new form OfflineVisualPanel3 */
    public OfflineVisualPanel3(ExperimentContext exp) {
        initComponents();
        frame = WindowManager.getDefault().getMainWindow();
        indexpanel = new IndexPanel(frame, this, exp, null);
        add("Center", indexpanel);
        
        this.exp = exp;
        //  disableBoxes();       
    }
    @Override
    public boolean  doBeforeEntering() {
        indexpanel.checkIndices();
        return true;
    }

    @Override
    public String getName() {
        return "Step #3 (Indices)";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setAlignmentX(0.0F);
        setAlignmentY(0.0F);
        setOpaque(false);
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void taskDone(Task t) {
        setCursor(null);
       
        if (!t.isSuccess()){
            JOptionPane.showMessageDialog(this, "The index task failed");
        }
         indexpanel.checkIndices();

        // check nr of files
    }

    /**
     * @return the exp
     */
    public ExperimentContext getExp() {
        return exp;
    }

    /**
     * @param exp the exp to set
     */
    @Override
    public void setExp(ExperimentContext exp) {
        this.exp = exp;

        //  afterIndexAction();
    }


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void err(String msg, Exception ex) {
        Logger.getLogger(OfflineTopComponent.class.getName()).log(Level.SEVERE, msg, ex);
    }

    private void err(String msg) {
        Logger.getLogger(OfflineTopComponent.class.getName()).log(Level.SEVERE, msg);
    }

    private void warn(String msg) {
        Logger.getLogger(OfflineTopComponent.class.getName()).log(Level.WARNING, msg);
    }

    private void p(String msg) {
        //   System.out.println("ExperimentViewerTopComponent: " + msg);
        Logger.getLogger(OfflineTopComponent.class.getName()).log(Level.INFO, msg);
    }
}
