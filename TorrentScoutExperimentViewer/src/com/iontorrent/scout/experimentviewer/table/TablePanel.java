/*
 * Copyright (C) 2012 Life Technologies Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * TablePanel.java
 *
 * Created on 14.03.2012, 08:25:06
 */
package com.iontorrent.scout.experimentviewer.table;

import com.iontorrent.scout.experimentviewer.exptree.MyResult;
import java.awt.BorderLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JScrollPane;

/**
 *
 * @author Chantal Roth
 */
public class TablePanel extends javax.swing.JPanel {

    private DbTable table;
    private DbTableModel model;
    private TableListener listener;

    /** Creates new form TablePanel */
    public TablePanel(TableListener listener) {
        initComponents();
        p("Created table panel");
        setLayout(new BorderLayout());
        this.listener = listener;
        table = new DbTable();
        setOpaque(false);
        table.setOpaque(false);
        JScrollPane s = new JScrollPane(table);
        s.setOpaque(false);
        this.add("Center", s);

        this.table.getSelectionModel().setSelectionMode(table.getSelectionModel().SINGLE_SELECTION);
        table.setDefaultRenderer(Integer.class, new DbTableRenderer());
        table.setDefaultRenderer(Long.class, new DbTableRenderer());
        table.setDefaultRenderer(Double.class, new DbTableRenderer());
        table.setDefaultRenderer(Float.class, new DbTableRenderer());
        table.setDefaultRenderer(ImageIcon.class, new DbTableRenderer());
        table.addKeyListener(new MyKeyListener());
        //   this.addKeyListener(new MyKeyListener());
        table.addMouseListener(new MyAdapter());
    }

    public class MyAdapter extends MouseAdapter {

        @Override
        public void mouseClicked(MouseEvent evt) {
            int row = table.rowAtPoint(evt.getPoint());
            p("Mouse clicked in row " + row);
            rowSelected(row);
        }
    }

    public void updateTableModel(ArrayList<MyResult> res) {
        p("Updating table model with " + res.size() + "  res");
        model = new DbTableModel(res);
        table.setModel(model);
        table.setWidths();
        model.fireTableDataChanged();

    }

    private class MyKeyListener extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {
            p("Got key pressed: " + e.getKeyCode());
            if (e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_DOWN) {

                int row = table.getSelectedRow();
                if (e.getKeyCode() == KeyEvent.VK_UP) {
                    row--;
                } else {
                    row++;
                }
                if (row < 0) {
                    row = 0;
                }
                if (row > table.getModel().getRowCount()) {
                    row--;
                }
                // wellsTable.setRowSelectionInterval(row, row);
                p("Selected row " + row);
                rowSelected(row);
            } else {
            }
        }

        @Override
        public void keyReleased(KeyEvent e) {
            //   p("Got key released: " + e.getKeyCode());
        }

        @Override
        public void keyTyped(KeyEvent e) {
            p("Got key typed: " + e.getKeyCode());
        }
    }

    private void rowSelected(int r) {
        int row = table.convertRowIndexToModel(r);
        p("rowSelected " + r + " ->" + row);
        //  }
        if (row < 0) {
            p("Row < 0:" + row);
            return;
        }
        MyResult res = model.getResult(row);
        listener.rowSelected(res);;
        p("Sending selection to listener");

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private static void err(String ex) {
        Logger.getLogger(TablePanel.class.getName()).log(Level.SEVERE, ex);
    }

    private void p(String msg) {
        Logger.getLogger(TablePanel.class.getName()).log(Level.INFO, msg);
        System.out.println("TablePanel: " + msg);
    }
}
